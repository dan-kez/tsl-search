import { useContext, useEffect, useMemo, useState } from 'react';
import { supabase } from '../supabase/supabaseClient';
import {
  DataGrid,
  GridActionsCellItem,
  GridColDef,
  GridFilterModel,
} from '@mui/x-data-grid';
import {
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Drawer,
  useMediaQuery,
  useTheme,
  Link,
} from '@mui/material';
import PageShell from '../PageShell';
import { People as PeopleIcon } from '@mui/icons-material';
import { useGetWishListCardsOracleIdByLeagueId } from '../queries';

interface RowToRender {
  wishlist_id: number;
  end_wishlist_id: number;
  deck_id_with_wishlisted_card: number;
  moxfield_id: string;
  discord_name: string;
  sum_overlap: number;
}

const getDecksWithCard = async ({
  league_id,
  oracle_id,
}: {
  league_id: number;
  oracle_id: string;
}): Promise<
  {
    name: string;
    moxfield_id: string;
    discord_name: string;
    quantity: number;
  }[]
> => {
  const query = supabase
    .from('card_pool_oracle_with_username')
    .select('name, moxfield_id, discord_name, quantity')
    .eq('league_id', league_id)
    .eq('oracle_id', oracle_id);

  const { data: decks, error } = await query;

  if (error) {
    console.error(error);
  }
  // @ts-expect-error -- Error in autogenerated types
  return decks || [];
};

const DecksWithCardDrawer = ({
  league_id,
  oracle_id,
  closeModal,
}: {
  league_id: number;
  oracle_id: string;
  closeModal: () => void;
}) => {
  const theme = useTheme();
  const largeScreen = useMediaQuery(theme.breakpoints.up('sm'));

  const [decks, setDecks] = useState<
    { moxfield_id: string; discord_name: string; quantity: number }[]
  >([]);
  useEffect(() => {
    getDecksWithCard({ league_id, oracle_id }).then((decks) => {
      setDecks(decks);
    });
  }, [league_id, oracle_id]);
  return (
    <Drawer
      PaperProps={{
        sx: { width: largeScreen ? '25%' : '80%' },
      }}
      anchor="right"
      open={true}
      onClose={() => closeModal()}
    >
      <List>
        {decks.map(({ moxfield_id, discord_name, quantity }) => (
          <ListItem key={moxfield_id} disablePadding>
            <ListItemButton
              onClick={() => {
                window.open(`https://www.moxfield.com/decks/${moxfield_id}`);
              }}
            >
              <ListItemText primary={`${quantity}x ${discord_name}`} />
            </ListItemButton>
          </ListItem>
        ))}
      </List>
    </Drawer>
  );
};

function PotentialTrades() {
  const theme = useTheme();
  const largeScreen = useMediaQuery(theme.breakpoints.up('sm'));
  // TODO: Enable filtering by League Id
  const [leagueId] = useState<number>(1);
  const [wishlistIdForDrawer, setWishlistIdForDrawer] = useState<string>();
  const [filterModel, setFilterModel] = useState<GridFilterModel>();

  const rows = useGetWishListCardsOracleIdByLeagueId(leagueId);

  const columns = useMemo<GridColDef<RowToRender>[]>(
    () => [
      {
        field: 'actions',
        type: 'actions',
        width: 80,
        getActions: (params) => [
          <GridActionsCellItem
            icon={<PeopleIcon />}
            label="Owners"
            onClick={() => setWishlistIdForDrawer(params.row.end_wishlist_id)}
          />,
        ],
      },
      {
        field: 'discord_name',
        headerName: 'Moxfield Deck Name',
        flex: 1,
        renderCell: (row) => {
          return (
            <Link
              variant="body1"
              href={`https://www.moxfield.com/decks/${row.row.moxfield_id}`}
              rel="noref"
              target="_blank"
            >
              {row.value}
            </Link>
          );
        },
      },
      {
        field: 'discord_name',
        headerName: 'Moxfield Deck Name',
        flex: 1,
      }
    ],
    []
  );

  return (
    <PageShell>
      <div style={{ height: '90vh', width: '100%' }}>
        <DataGrid
          rows={rows}
          columns={columns}
          getRowId={(row) => row.end_wishlist_id}
          filterModel={filterModel}
          onFilterModelChange={setFilterModel}
          density="comfortable"
          disableDensitySelector
          disableRowSelectionOnClick
          initialState={{
            columns: {
              columnVisibilityModel: {
                oracle_text: false,
                colors: false,
                rarity: false,
                // only show this by default on large screens
                type_line: largeScreen,
              },
            },
          }}
        />
      </div>
      {!!wishlistIdForDrawer && (
        <DecksWithCardDrawer
          league_id={1}
          oracle_id={wishlistIdForDrawer}
          closeModal={() => setWishlistIdForDrawer(undefined)}
        />
      )}
    </PageShell>
  );
}

export default PotentialTrades;
