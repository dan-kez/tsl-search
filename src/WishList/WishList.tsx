import { useContext, useEffect, useMemo, useState } from 'react';
import { supabase } from '../supabase/supabaseClient';
import {
  DataGrid,
  GridActionsCellItem,
  GridColDef,
  GridFilterModel,
} from '@mui/x-data-grid';
import {
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Drawer,
  useMediaQuery,
  useTheme,
} from '@mui/material';
import ManaCost from '../Search/ManaCost';
import PageShell from '../PageShell';
import { People as PeopleIcon } from '@mui/icons-material';
import { AuthContext } from '../AuthContext';

interface CardResponse {
  deck: {
    name: string;
    moxfield_id: string;
  };
  oracle_card: {
    oracle_id: string;
    scryfall_id: string;
    colors: string[];
    name: string;
    oracle_text: string;
    type_line: string;
    image_uri: string;
    mana_cost: string;
    rarity: string;
  };
}

interface RowToRender {
  oracle_id: string;
  scryfall_id: string;
  colors: string[];
  image_uri: string;
  mana_cost: string;
  name: string;
  oracle_text: string;
  type_line: string;
  rarity: string;
}

const useGetWishListCardsOracleIdByLeagueId = (
  league_id: number
): RowToRender[] => {
  const { user } = useContext(AuthContext);
  const [cards, setCards] = useState<RowToRender[]>([]);

  useEffect(() => {
    const asyncSupabaseCall = async (): Promise<CardResponse[]> => {
      if (!user) return [];
      const query = supabase
        .from('wishlist_card')
        .select(
          `
            wishlist!wishlist_id!inner (league_id, user_id),
            oracle_card:oracle_id!inner (
              oracle_id:id,
              colors,
              image_uri,
              mana_cost,
              name,
              oracle_text,
              type_line,
              rarity,
              scryfall_id
            )
          `
        )
        .eq('wishlist.league_id', league_id)
        .eq('wishlist.user_id', user.id);

      const { data: cardResponses, error } = await query;
      if (error) {
        console.error(error);
      }
      // @ts-expect-error -- Error in autogenerated types
      return cardResponses || [];
    };

    asyncSupabaseCall().then((cardResponses) => {
      setCards(cardResponses.map(({ oracle_card }) => oracle_card));
    });
  }, [user, user?.id, league_id]);

  return cards;
};

const getDecksWithCard = async ({
  league_id,
  oracle_id,
}: {
  league_id: number;
  oracle_id: string;
}): Promise<
  {
    name: string;
    moxfield_id: string;
    discord_name: string;
    quantity: number;
  }[]
> => {
  const query = supabase
    .from('card_pool_oracle_with_username')
    .select('name, moxfield_id, discord_name, quantity')
    .eq('league_id', league_id)
    .eq('oracle_id', oracle_id);

  const { data: decks, error } = await query;

  if (error) {
    console.error(error);
  }
  // @ts-expect-error -- Error in autogenerated types
  return decks || [];
};

const DecksWithCardDrawer = ({
  league_id,
  oracle_id,
  closeModal,
}: {
  league_id: number;
  oracle_id: string;
  closeModal: () => void;
}) => {
  const theme = useTheme();
  const largeScreen = useMediaQuery(theme.breakpoints.up('sm'));

  const [decks, setDecks] = useState<
    { moxfield_id: string; discord_name: string; quantity: number }[]
  >([]);
  useEffect(() => {
    getDecksWithCard({ league_id, oracle_id }).then((decks) => {
      setDecks(decks);
    });
  }, [league_id, oracle_id]);
  return (
    <Drawer
      PaperProps={{
        sx: { width: largeScreen ? '25%' : '80%' },
      }}
      anchor="right"
      open={true}
      onClose={() => closeModal()}
    >
      <List>
        {decks.map(({ moxfield_id, discord_name, quantity }) => (
          <ListItem key={moxfield_id} disablePadding>
            <ListItemButton
              onClick={() => {
                window.open(`https://www.moxfield.com/decks/${moxfield_id}`);
              }}
            >
              <ListItemText primary={`${quantity}x ${discord_name}`} />
            </ListItemButton>
          </ListItem>
        ))}
      </List>
    </Drawer>
  );
};

function WishList() {
  const theme = useTheme();
  const largeScreen = useMediaQuery(theme.breakpoints.up('sm'));
  // TODO: Enable filtering by League Id
  const [leagueId] = useState<number>(1);
  const [deckIdForDrawer, setDeckIdForDrawer] = useState<string>();
  const [filterModel, setFilterModel] = useState<GridFilterModel>();

  const columns = useMemo<GridColDef<RowToRender>[]>(
    () => [
      {
        field: 'actions',
        type: 'actions',
        width: 80,
        getActions: (params) => [
          <GridActionsCellItem
            icon={<PeopleIcon />}
            label="Owners"
            onClick={() => setDeckIdForDrawer(params.row.oracle_id)}
          />,
        ],
      },
      {
        field: 'name',
        headerName: 'Card Name',
        flex: 1,
        renderCell: (row) => {
          return (
            <div className="hover-img">
              <ManaCost mana_cost={row.row.mana_cost} />
              <a
                href={`https://scryfall.com/cards/${row.row.scryfall_id}`}
                rel="noref"
                target="_blank"
              >
                &nbsp;{row.value}
                <span>
                  <img src={row.row.image_uri} alt="scryfall image" />
                </span>
              </a>
            </div>
          );
        },
      },
    ],
    []
  );

  const rows = useGetWishListCardsOracleIdByLeagueId(leagueId);

  return (
    <PageShell>
      <div style={{ height: '90vh', width: '100%' }}>
        <DataGrid
          rows={rows}
          columns={columns}
          getRowId={(row) => row.oracle_id}
          filterModel={filterModel}
          onFilterModelChange={setFilterModel}
          density="comfortable"
          disableDensitySelector
          disableRowSelectionOnClick
          initialState={{
            columns: {
              columnVisibilityModel: {
                oracle_text: false,
                colors: false,
                rarity: false,
                // only show this by default on large screens
                type_line: largeScreen,
              },
            },
          }}
        />
      </div>
      {!!deckIdForDrawer && (
        <DecksWithCardDrawer
          league_id={1}
          oracle_id={deckIdForDrawer}
          closeModal={() => setDeckIdForDrawer(undefined)}
        />
      )}
    </PageShell>
  );
}

export default WishList;
